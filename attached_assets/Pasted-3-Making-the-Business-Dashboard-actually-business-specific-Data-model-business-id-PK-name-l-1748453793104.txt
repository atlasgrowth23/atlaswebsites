3 ‚ñ∏ Making the Business Dashboard actually ‚Äúbusiness-specific‚Äù
Data model
business

id (PK)

name, logoUrl, siteColour, ‚Ä¶ (everything that can differ)

metric (if you store analytics)

id, businessId, page, views, ‚Ä¶

A foreign-key + index on businessId lets you query everything for one tenant quickly.

API routes (Next.js 14 <code>app</code> or pages-router‚Äîboth work)
ts
Copy
Edit
// pages/api/business/[id].ts
import prisma from '@/lib/prisma';

export default async function handler(req, res) {
  const id = Number(req.query.id);
  if (req.method === 'PUT') {
    const business = await prisma.business.update({
      where: { id },
      data: req.body,   // üö¶ validate this first!
    });
    return res.json(business);
  }
  if (req.method === 'GET') {
    return res.json(await prisma.business.findUnique({ where: { id } }));
  }
}
Prisma‚Äôs update() call above is the idiomatic one-liner 
Prisma
.

Front-end form pattern
go
Copy
Edit
Fetch business once in `getServerSideProps` (or `loader` in the App router).  
css
Copy
Edit
Use **react-hook-form** for instant validation.  
pgsql
Copy
Edit
On submit, `fetch('/api/business/42', {method:'PUT', body:JSON.stringify(data)})`.  
perl
Copy
Edit
Optimistically update state so the page refreshes immediately.  
pgsql
Copy
Edit
Reuse the same component for ‚Äúcreate‚Äù by omitting `id`.
Because each update is scoped by where: { id }, another tenant‚Äôs website remains untouched.

4 ‚ñ∏ Showing ‚ÄúWebsite Tracking Analytics‚Äù inside each card
Add a lazy-loaded <AnalyticsPanel businessId={42} />.

The component hits /api/business/42/metrics?range=30d and renders a miniature chart (use recharts or next/chartjs).

Put the panel inside a <Dialog> or expandable <details> tag so the dashboard stays clean.

5 ‚ñ∏ Directory clean-up suggestion
Right now you have a top-level CompanyData folder with JSON files. Once the data sits in Postgres you can:

Delete the static JSON from the build, or keep it only as seed data.

Import it during npx prisma db seed so local developers start with meaningful content.

Next steps in plain English
Swap out raster logos for SVGs and restrict their CSS height.

Wrap every image in <Image> (or a tiny helper) so you get automatic srcset + lazy-loading.

Turn on Sharp in a build script for new uploads; keep original files outside public.

Introduce a typed Business edit form that saves through a tenant-scoped API route.

Progressively enhance: add the analytics drawer, then the form-customiser drawer.