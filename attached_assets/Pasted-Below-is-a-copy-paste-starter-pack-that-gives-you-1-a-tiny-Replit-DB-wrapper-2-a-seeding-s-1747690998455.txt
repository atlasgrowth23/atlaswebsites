Below is a **copy-/-paste starter pack** that gives you:

1. a tiny Replit-DB wrapper
2. a seeding script that stuffs one throw-away user per company (approach **1A**, the fastest way to get moving)
3. a login API that checks the creds, drops a session cookie, and kicks the user to `/portal/[slug]`
4. a `/login` page that auto-submits the hidden form so prospects just click the button once
5. a protected `/portal/[slug]` placeholder so you can see the session working
6. minimal `middleware.ts` to gate access

> **Folder map**

```
/lib/db.ts
/scripts/seedPreview.ts
/pages/api/auth/login.ts
/pages/login.tsx
/pages/portal/[slug]/index.tsx
/middleware.ts
.env.local
```

---

## 1‚ÄÇReplit-DB helper ‚Äì `lib/db.ts`

```ts
// lib/db.ts
import fetch from "node-fetch";

const DB_URL = process.env.REPLIT_DB_URL as string;

export const db = {
  async get<T = any>(key: string): Promise<T | null> {
    const res = await fetch(`${DB_URL}/${key}`);
    const txt = await res.text();
    return txt ? JSON.parse(txt) : null;
  },
  async set(key: string, value: any) {
    await fetch(DB_URL, {
      method: "POST",
      body: `${key}=${JSON.stringify(value)}`
    });
  },
  async list(prefix: string) {
    const res = await fetch(`${DB_URL}?prefix=${prefix}`);
    return res.text();
  }
};
```

Add to `.env.local`:

```
REPLIT_DB_URL=https://kvdb.io/XXXXX   # or the URL Replit gives you
SESSION_SECRET=super_long_random_string
```

---

## 2‚ÄÇSeeding preview users ‚Äì `scripts/seedPreview.ts`

Run once (`pnpm ts-node scripts/seedPreview.ts`) to generate creds for every company JSON you already have.

```ts
// scripts/seedPreview.ts
import { db } from "../lib/db";
import bcrypt from "bcryptjs";
import fs from "fs";

interface Company { slug: string; name: string; /* ‚Ä¶ */ }

const companies: Company[] = JSON.parse(
  fs.readFileSync("./data/companies.json", "utf8")
);

(async () => {
  const lines: string[] = ["slug,username,password"];
  for (const c of companies) {
    const username = `${c.slug}-preview`;
    const password = crypto.randomUUID().slice(0, 8); // 8-char throw-away
    const passwordHash = await bcrypt.hash(password, 10);

    await db.set(`company:${c.slug}`, c);
    await db.set(`previewUser:${c.slug}`, {
      username,
      passwordHash,
      expires: Date.now() + 14 * 24 * 3600 * 1000 // 14 days
    });

    lines.push(`${c.slug},${username},${password}`);
  }
  fs.writeFileSync("./preview_creds.csv", lines.join("\n"));
  console.log("‚úÖ seeded preview users -> preview_creds.csv");
})();
```

Keep `preview_creds.csv` **local**‚Äîyou‚Äôll copy the password into each prospect‚Äôs login link.

---

## 3‚ÄÇLogin API ‚Äì `pages/api/auth/login.ts`

```ts
// pages/api/auth/login.ts
import { NextApiRequest, NextApiResponse } from "next";
import { db } from "../../../lib/db";
import bcrypt from "bcryptjs";
import { serialize } from "cookie";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).end();

  const { slug, username, password } = req.body as {
    slug: string; username: string; password: string;
  };

  const preview = await db.get<{
    username: string; passwordHash: string; expires: number;
  }>(`previewUser:${slug}`);

  if (!preview || Date.now() > preview.expires)
    return res.status(403).send("Preview expired");

  const ok =
    username === preview.username &&
    (await bcrypt.compare(password, preview.passwordHash));

  if (!ok) return res.status(401).send("Bad credentials");

  // sign simple session value (=slug) with HMAC
  const token = Buffer.from(
    `${slug}.${crypto
      .createHmac("sha256", process.env.SESSION_SECRET!)
      .update(slug)
      .digest("hex")}`
  ).toString("base64");

  res.setHeader(
    "Set-Cookie",
    serialize("session", token, {
      httpOnly: true,
      path: "/",
      maxAge: 14 * 24 * 3600
    })
  );
  res.redirect(`/portal/${slug}`);
}
```

---

## 4‚ÄÇAuto-submit login page ‚Äì `pages/login.tsx`

```tsx
// pages/login.tsx
import { GetServerSideProps } from "next";
import Head from "next/head";
import { db } from "../lib/db";

interface Props {
  slug: string;
  username: string;
  password: string;
}

export default function LoginAuto({ slug, username, password }: Props) {
  return (
    <>
      <Head><title>Logging you in‚Ä¶</title></Head>
      <form
        id="autoForm"
        method="POST"
        action="/api/auth/login"
        style={{ display: "none" }}
      >
        <input name="slug" value={slug} readOnly />
        <input name="username" value={username} readOnly />
        <input name="password" value={password} readOnly />
      </form>
      <p style={{ textAlign: "center", marginTop: "3rem" }}>
        Redirecting to your portal‚Ä¶
      </p>
      <script
        dangerouslySetInnerHTML={{
          __html: `document.getElementById("autoForm").submit();`
        }}
      />
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const slug = query.slug as string;
  if (!slug) return { notFound: true };

  const preview = await db.get<{ username: string; passwordHash: string }>(
    `previewUser:${slug}`
  );
  if (!preview) return { notFound: true };

  // üí°  password is saved only in preview_creds.csv
  const password = ""; // leave blank on server so it never leaks
  return { props: { slug, username: preview.username, password } };
};
```

How to use it:

```
https://demo.yoursaas.com/login?slug=comfort-heating&pwd=THEPASSWORD
```

*You‚Äôll replace `password=""` section with `password: query.pwd` when you build the link (so the server never looks it up).*

---

## 5‚ÄÇProtected portal placeholder ‚Äì `pages/portal/[slug]/index.tsx`

```tsx
// pages/portal/[slug]/index.tsx
import { GetServerSideProps } from "next";
import { parse } from "cookie";
import crypto from "crypto";
import { db } from "../../../lib/db";

interface Props { companyName: string; slug: string; }

export default function Portal({ companyName }: Props) {
  return (
    <main style={{ fontFamily: "sans-serif", padding: 40 }}>
      <h1>üè† {companyName} ‚Äì Demo Portal</h1>
      <p>‚úÖ You are authenticated. Build UI here‚Ä¶</p>
    </main>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req, params }) => {
  const slug = params!.slug as string;
  const session = parse(req.headers.cookie || "").session || "";
  const [val, sig] = Buffer.from(session, "base64").toString().split(".");
  const good =
    val === slug &&
    crypto
      .createHmac("sha256", process.env.SESSION_SECRET!)
      .update(val)
      .digest("hex") === sig;

  if (!good) {
    return { redirect: { destination: `/login?slug=${slug}`, permanent: false } };
  }

  const company = await db.get<{ name: string }>(`company:${slug}`);
  return { props: { companyName: company?.name || slug, slug } };
};
```

---

## 6‚ÄÇTiny middleware to keep `/portal` private ‚Äì `middleware.ts`

```ts
import { NextRequest, NextResponse } from "next/server";
import { parse } from "cookie";
import crypto from "crypto";

export function middleware(req: NextRequest) {
  if (!req.nextUrl.pathname.startsWith("/portal")) return;

  const slug = req.nextUrl.pathname.split("/")[2] || "";
  const session = parse(req.headers.get("cookie") || "").session || "";

  const [val, sig] = Buffer.from(session, "base64").toString().split(".");
  const good =
    val === slug &&
    crypto
      .createHmac("sha256", process.env.SESSION_SECRET!)
      .update(val)
      .digest("hex") === sig;

  if (!good) {
    return NextResponse.redirect(
      new URL(`/login?slug=${slug}`, req.nextUrl.origin)
    );
  }
}
```

Add to `next.config.js` (if not already):

```js
module.exports = {
  experimental: { middleware: true }
};
```

---

## 7‚ÄÇWhat to do next

1. **Run the seed script** ‚Üí note each prospect‚Äôs password.

2. **Deploy** to Vercel with `REPLIT_DB_URL` & `SESSION_SECRET` env vars.

3. Send the prospect a link:

   ```
   https://theirslug.yoursaas.com (public demo site)
   https://demo.yoursaas.com/login?slug=theirslug&pwd=thepassword  (one-click portal)
   ```

4. Verify you land on the placeholder portal page.

5. **Add visit tracking** ‚Äì hit `/api/track` in `_app.tsx`.

6. **Build chat widget** ‚Äì store messages under `messages:${slug}` and expose via WebSocket or polling.

7. **Replace placeholder UI** with your actual CRM/dashboard components.

8. When they convert, create a real user row, wipe `previewUser:${slug}`, and show a *Reset password* flow that writes `user:<uuid>` records (easy to layer on later).

You now have a functioning ‚Äúclick, you‚Äôre in‚Äù preview flow entirely on Replit DB and Next.js. Ping me when you‚Äôre ready to bolt on chat or tracking, and I‚Äôll drop the next code slice.
