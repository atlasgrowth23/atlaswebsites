Context  
───────  
You’re working inside github.com/atlasgrowth23/atlaswebsites — a multi-tenant Next.js (13) platform that spins up template sites for HVAC contractors.  
•  Each business record already stores heroImage1/2 and aboutImageUrl and the admin form writes those fine.  
•  A new form field **logoUrl** was added, but the value never survives the round-trip nor shows on the live site.  
•  A “customDomain” field is also present.  When saved we want the domain automatically:
    1️⃣  Added to the Vercel project  
    2️⃣  DNS records (A / CNAME & TXT) created in GoDaddy (where our domains live)  
    3️⃣  Vercel domain verification polled until READY

Your mission  
─────────────  
1. **Persist logoUrl end-to-end**  
   •  Extend `/types/Business.ts`, Prisma schema & SQL with `logoUrl: string | null` (nullable).  
   •  Update `/pages/api/business/[slug].ts` (PUT & POST) to whitelist `logoUrl`.  
   •  Trigger ISR revalidation for the ModernTrust template route when logoUrl changes.  
   •  Replace the hard-coded `<Image src="/logo.png">` in `components/template-headers/ModernTrustHeader.tsx` with:  
     ```tsx
     <Image
       src={business.logoUrl || '/placeholder-logo.svg'}
       alt={`${business.name} logo`}
       width={180}
       height={60}
       priority
     />
     ```  
   •  Add a broad `remotePatterns` rule to **next.config.js** so external logos render.

2. **Image optimisation (Sharp)**  
   •  Install Sharp (`npm i sharp`).  
   •  In `lib/images.ts` create `processLogo(buffer)` which outputs 1× / 2× WebP variants (max 600 px), uploads to `attached_assets/logos/`, returns their URLs, and stores just the JSON in DB.  
   •  Hook this helper into the API route when `logoUrl` is a web URL **or** when the user uploads a file via Multer.  
   •  For non-critical images (hero, about) strip the `priority` flag so Next/Image lazy-loads them.

3. **Autoprovision custom domains**  
   •  New server util `lib/domains.ts` with `addCustomDomain(domain, projectId)` that:
       a. Calls **Vercel Domains API** `POST https://api.vercel.com/v4/domains` then `POST /v9/projects/{projectId}/domains` to attach the domain. 🔗 Docs: https://vercel.com/guides/how-do-i-add-a-domain-using-the-vercel-api  
       b. Reads the verification/alias records returned.  
       c. Uses **GoDaddy DNS API** `PUT /v1/domains/{domain}/records` to create/patch those records. 🔗 Docs: https://developer.godaddy.com/doc/endpoint/domains  
       d. Polls `GET https://api.vercel.com/v6/domains/{domain}` until `"configured": true`.  
   •  Accept `VERCEL_TOKEN`, `VERCEL_PROJECT_ID`, `GODADDY_KEY`, `GODADDY_SECRET` via env.  
   •  Wire this util into `/pages/api/domains/add.ts` which the admin form already hits after save.  
   •  Return clear JSON status so the front-end can surface “Domain verified!” or actionable error.

4. **Stretch ideas (feel free to improve)**  
   •  Detect when `logoUrl` points to SVG → skip Sharp resize and simply copy.  
   •  Auto-buy domains via GoDaddy “Purchase” endpoint if `available=true`.  Fall back to error if purchase disabled.  
   •  Cache Vercel domain-status polling with exponential back-off to stay under rate limits.

Deliverables  
────────────  
•  Fully-green `npm test` (if tests) & `next build`.  
•  Migration file & seed script for updated schema.  
•  PR description explaining **why** each change – so future devs grok image optimisation & domain automation trade-offs.  
