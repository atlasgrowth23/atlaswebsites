Right now:
  ▸ The admin form lets the user paste heroImage1, heroImage2, aboutImageUrl AND a new field called logoUrl.  
  ▸ hero/about images persist and render, **logoUrl does not** (it never shows on the live site).  
  ▸ All images are stored verbatim, so large JPG/PNG uploads bloat page weight and logos look fuzzy on Retina.

Our goals in this task
─────────────────────
1  Persist logoUrl end-to-end (form → API → DB → template → ISR).  
2  Replace the hard-coded `/logo.png` in the ModernTrust template with the dynamic logo.  
3  Pipe every inbound logo through Sharp to emit crisp, lightweight WebP (1× and 2×).  
4  Give hero/about images the same optimisation pass and lazy-load them to improve LCP.

Why it matters (so you can suggest better ways)
––––––––––––––––––––––––––––––––––––––––––––––
• Clear branding: each contractor’s real logo renders instead of a generic placeholder.  
• Performance: WebP + size caps cut payload by ~70 %, helping us keep Lighthouse ≥ 90.  
• Dev-ex: pushing all image logic into one helper avoids copy-pasted resize code.

Deliverables & steps
────────────────────
**A. Data & API layer (10 min)**
  1. Add `logoUrl: string | null` to `/prisma/schema.prisma` and `/types/Business.ts`; run `npx prisma migrate dev`.  
  2. In `/pages/api/business/[slug].ts` ensure `logoUrl` is pulled from `req.body` and included in the `UPDATE`.  
  3. After a successful PUT/PATCH, hit `/api/revalidate?tag=moderntrust` (on-demand ISR) so the site rebuilds with the new logo.

**B. Front-end template (5 min)**
  1. In `components/template-headers/ModernTrustHeader.tsx` replace the static import:
     ```tsx
     <Image
       src={business.logoUrl || '/placeholder-logo.svg'}
       alt={`${business.name} logo`}
       width={180}
       height={60}
       priority     // keep priority for the logo; drop it elsewhere
     />
     ```
  2. Add a wildcard rule to `next.config.js` so external logos display without “un-configured host” errors:
     ```js
     images: {
       remotePatterns: [{ protocol: 'https', hostname: '**', pathname: '/**' }],
     },
     ```  // Next.js docs recommend remotePatterns over domains for 15.x and up :contentReference[oaicite:0]{index=0}

**C. Image-processing helper (15 min)**
  1. `npm i sharp uuid`  
  2. Create `lib/images.ts` with:
     ```ts
     export async function processLogo(buffer: Buffer) {
       const id = uuid();
       const base = `logos/${id}`;
       const variants = [
         { key: `${base}@1x.webp`, width: 300 },
         { key: `${base}@2x.webp`, width: 600 },
       ];
       await Promise.all(
         variants.map(v =>
           sharp(buffer)
             .resize({ width: v.width })
             .webp({ quality: 82 })
             .toBuffer()
             .then(buf => putObject(v.key, buf, 'image/webp')),
         ),
       );
       return {
         '1x': `https://cdn.example.com/${base}@1x.webp`,
         '2x': `https://cdn.example.com/${base}@2x.webp`,
       };
     }
     ```  
     (Use any existing `putObject` S3 helper.) Sharp is the fastest Node image lib and supports WebP out of the box :contentReference[oaicite:1]{index=1}  
  3. When the admin submits a logo **file**:  
       – process the Buffer directly.  
     When the admin supplies a **URL**:  
       – fetch it with `axios`, pipe into `processLogo`.  
     Store only the returned JSON in `Business.logoUrl`.

**D. Optimise hero/about images (bonus 10 min)**
  • Re-use the same Sharp helper but generate `[640, 960, 1280]` widths.  
  • Remove the `priority` flag so Next/Image lazy-loads them; keep explicit `width`/`height` props to avoid CLS.  
  • Optionally add a base-64 `blurDataURL` placeholder (plaiceholder).

Testing checklist
─────────────────
▢  Submit the form with a remote PNG logo → new site build shows the logo.  
▢  Submit a 4 MB hero JPEG → CDN size ≤ 200 KB, source drops to WebP.  
▢  Run `next build && next start` locally – no `next/image` un-configured host warnings.  
▢  Lighthouse mobile > 90, CLS ≤ 0.1, TTI unchanged.

If you see a cleaner way (e.g. using Next.js 15’s built-in Image Optimization CDN) feel free to adapt, provided effort ≤ 30 min.