#!/usr/bin/env python3
"""
Script to update reviews_link field in companies table by mapping place_id
from the new Bama CSV file.
"""

import csv
import os
import sys
import psycopg2
from urllib.parse import urlparse

def get_db_connection():
    """Get database connection from environment variable"""
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        raise Exception("DATABASE_URL environment variable not found")
    
    return psycopg2.connect(database_url)

def read_bama_csv():
    """Read the Bama CSV and extract place_id -> reviews_link mapping"""
    csv_file = "BAMA - Generated by Outscraper ©.csv"
    
    if not os.path.exists(csv_file):
        raise Exception(f"CSV file not found: {csv_file}")
    
    place_id_to_reviews = {}
    
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            place_id = row.get('place_id', '').strip()
            reviews_link = row.get('reviews_link', '').strip()
            
            if place_id and reviews_link:
                place_id_to_reviews[place_id] = reviews_link
    
    return place_id_to_reviews

def update_reviews_links():
    """Main function to update reviews_link in database"""
    
    # Read CSV data
    print("Reading Bama CSV file...")
    place_id_mapping = read_bama_csv()
    print(f"Found {len(place_id_mapping)} businesses with reviews_link in CSV")
    
    # Connect to database
    print("Connecting to database...")
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # First, add the reviews_link column if it doesn't exist
        cursor.execute("""
            ALTER TABLE companies 
            ADD COLUMN IF NOT EXISTS reviews_link TEXT;
        """)
        
        # Get all companies with place_id
        cursor.execute("SELECT id, place_id, name FROM companies WHERE place_id IS NOT NULL")
        companies = cursor.fetchall()
        
        print(f"Found {len(companies)} companies in database with place_id")
        
        # Update companies that have matching place_id
        updated_count = 0
        matched_companies = []
        
        for company_id, place_id, company_name in companies:
            if place_id in place_id_mapping:
                reviews_link = place_id_mapping[place_id]
                
                cursor.execute(
                    "UPDATE companies SET reviews_link = %s WHERE id = %s",
                    (reviews_link, company_id)
                )
                
                updated_count += 1
                matched_companies.append({
                    'name': company_name,
                    'place_id': place_id,
                    'reviews_link': reviews_link
                })
                
                print(f"Updated: {company_name} -> {reviews_link}")
        
        # Commit changes
        conn.commit()
        
        print(f"\n✅ SUCCESS: Updated reviews_link for {updated_count} businesses")
        print(f"📊 Total CSV entries: {len(place_id_mapping)}")
        print(f"📊 Total DB companies: {len(companies)}")
        print(f"📊 Successful matches: {updated_count}")
        
        return updated_count, matched_companies
        
    except Exception as e:
        conn.rollback()
        print(f"❌ ERROR: {str(e)}")
        raise
    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    try:
        updated_count, matched_companies = update_reviews_links()
        
        # Show sample of updated companies
        if matched_companies:
            print(f"\n📋 Sample of updated companies:")
            for i, company in enumerate(matched_companies[:5]):
                print(f"  {i+1}. {company['name']}")
            
            if len(matched_companies) > 5:
                print(f"  ... and {len(matched_companies) - 5} more")
                
    except Exception as e:
        print(f"Script failed: {str(e)}")
        sys.exit(1)