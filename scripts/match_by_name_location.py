#!/usr/bin/env python3
"""
Script to match businesses by name and location since place_ids don't match.
"""

import csv
import os
import psycopg2
import re
from difflib import SequenceMatcher

def normalize_name(name):
    """Normalize business name for matching"""
    if not name:
        return ""
    
    # Convert to lowercase
    name = name.lower()
    
    # Remove common business suffixes and words
    replacements = [
        r'\bllc\b', r'\binc\b', r'\bcorp\b', r'\bco\b', r'\bcompany\b',
        r'\bservices?\b', r'\bservice\b', r'\bsolutions?\b', r'\bsystem\b',
        r'\bheating\b', r'\bcooling\b', r'\bair\b', r'\bconditioning\b',
        r'\bhvac\b', r'\bmechanical\b', r'\bcontractors?\b', r'\bplumbing\b',
        r'\belectrical\b', r'\b&\b', r'\band\b', r'\bthe\b'
    ]
    
    for pattern in replacements:
        name = re.sub(pattern, ' ', name)
    
    # Remove extra spaces and punctuation
    name = re.sub(r'[^\w\s]', ' ', name)
    name = re.sub(r'\s+', ' ', name).strip()
    
    return name

def similarity(a, b):
    """Calculate similarity between two strings"""
    return SequenceMatcher(None, a, b).ratio()

def get_db_connection():
    """Get database connection"""
    return psycopg2.connect(os.environ.get('DATABASE_URL'))

def match_businesses():
    """Match businesses by name and location"""
    
    # Read CSV data
    csv_file = "BAMA - Generated by Outscraper ©.csv"
    csv_businesses = []
    
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row.get('state', '').strip() == 'Alabama':
                csv_businesses.append({
                    'name': row.get('name', '').strip(),
                    'city': row.get('city', '').strip(),
                    'phone': row.get('phone', '').strip(),
                    'reviews_link': row.get('reviews_link', '').strip(),
                    'place_id': row.get('place_id', '').strip()
                })
    
    print(f"Found {len(csv_businesses)} Alabama businesses in CSV")
    
    # Get database businesses
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT id, name, city, phone, place_id 
        FROM companies 
        WHERE state = 'Alabama'
    """)
    db_businesses = cursor.fetchall()
    
    print(f"Found {len(db_businesses)} Alabama businesses in database")
    
    # Try to match them
    matches = []
    
    for db_id, db_name, db_city, db_phone, db_place_id in db_businesses:
        best_match = None
        best_score = 0
        
        db_name_norm = normalize_name(db_name)
        db_city_norm = (db_city or '').lower().strip()
        db_phone_clean = re.sub(r'[^\d]', '', db_phone or '')
        
        for csv_biz in csv_businesses:
            csv_name_norm = normalize_name(csv_biz['name'])
            csv_city_norm = csv_biz['city'].lower().strip()
            csv_phone_clean = re.sub(r'[^\d]', '', csv_biz['phone'])
            
            # Calculate name similarity
            name_score = similarity(db_name_norm, csv_name_norm)
            
            # Bonus for city match
            city_bonus = 0.2 if db_city_norm == csv_city_norm else 0
            
            # Bonus for phone match
            phone_bonus = 0.3 if db_phone_clean and csv_phone_clean and db_phone_clean[-10:] == csv_phone_clean[-10:] else 0
            
            total_score = name_score + city_bonus + phone_bonus
            
            if total_score > best_score and total_score > 0.6:  # Minimum threshold
                best_score = total_score
                best_match = csv_biz
        
        if best_match:
            matches.append({
                'db_id': db_id,
                'db_name': db_name,
                'csv_name': best_match['name'],
                'city': db_city,
                'score': best_score,
                'reviews_link': best_match['reviews_link']
            })
    
    print(f"\nFound {len(matches)} potential matches")
    
    # Show some examples
    print("\nTop matches:")
    for match in sorted(matches, key=lambda x: x['score'], reverse=True)[:10]:
        print(f"  {match['score']:.2f}: {match['db_name']} <-> {match['csv_name']} ({match['city']})")
    
    # Update database
    updated_count = 0
    if matches:
        for match in matches:
            if match['reviews_link']:
                cursor.execute(
                    "UPDATE companies SET reviews_link = %s WHERE id = %s",
                    (match['reviews_link'], match['db_id'])
                )
                updated_count += 1
        
        conn.commit()
        print(f"\n✅ Updated reviews_link for {updated_count} businesses")
    
    cursor.close()
    conn.close()
    
    return updated_count, len(matches)

if __name__ == "__main__":
    try:
        updated_count, total_matches = match_businesses()
        print(f"\nFinal result: {updated_count} businesses updated with reviews_link")
    except Exception as e:
        print(f"Script failed: {str(e)}")