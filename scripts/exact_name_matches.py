#!/usr/bin/env python3
"""
Update reviews_link for exact name matches between CSV and database.
"""

import csv
import os
import psycopg2

def update_exact_matches():
    """Update businesses with exact name matches"""
    
    # Read CSV data
    csv_file = "BAMA - Generated by Outscraper ©.csv"
    csv_data = {}
    
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row.get('state', '').strip() == 'Alabama':
                name = row.get('name', '').strip()
                reviews_link = row.get('reviews_link', '').strip()
                if name and reviews_link:
                    csv_data[name.lower()] = {
                        'original_name': name,
                        'reviews_link': reviews_link
                    }
    
    print(f"CSV: {len(csv_data)} Alabama businesses with reviews_link")
    
    # Connect to database
    conn = psycopg2.connect(os.environ.get('DATABASE_URL'))
    cursor = conn.cursor()
    
    try:
        # Get all Alabama companies
        cursor.execute("SELECT id, name FROM companies WHERE state = 'Alabama'")
        db_companies = cursor.fetchall()
        
        # Find exact matches and update
        updated_count = 0
        matched_businesses = []
        
        for company_id, company_name in db_companies:
            if company_name and company_name.lower() in csv_data:
                csv_match = csv_data[company_name.lower()]
                reviews_link = csv_match['reviews_link']
                
                cursor.execute(
                    "UPDATE companies SET reviews_link = %s WHERE id = %s",
                    (reviews_link, company_id)
                )
                
                updated_count += 1
                matched_businesses.append({
                    'db_name': company_name,
                    'csv_name': csv_match['original_name'],
                    'reviews_link': reviews_link
                })
                
                print(f"✓ {company_name}")
        
        # Commit changes
        conn.commit()
        
        print(f"\n✅ Updated {updated_count} businesses with exact name matches")
        return updated_count, matched_businesses
        
    except Exception as e:
        conn.rollback()
        print(f"❌ ERROR: {str(e)}")
        raise
    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    try:
        updated_count, matches = update_exact_matches()
        print(f"\nFinal result: {updated_count} businesses got reviews_link from Bama CSV")
        
    except Exception as e:
        print(f"Script failed: {str(e)}")